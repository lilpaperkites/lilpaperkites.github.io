---
layout: post
title:  Routes and Resources
date:   2017-05-23 17:37:55 +0000
---

Rails is a framework used to create web applications backed by databases. It uses the Model-View-Controller method, which implements user interfaces. The benefits of M-V-C are that it allows for simultaneous programming of both the back- and front-end of applications, and that the code can be reused and refactored for different web applications.

Rails, written in Ruby, has a set of conventions for routing and noting resources that simplify user interaction.

Routes are the actions for connecting the user with the website or application by URL with a "controller action," and resources are the portions of the application that the user is attempting to access through the routes you have created.

For example, if you were creating a blog using Rails, you might rely on the following actions: "create," "edit," "destroy," "update," etc. The blog post itself would be a resource, and the route is the connection between the author and the blog. If you want to edit a post, the resource, "post," would by accessed by a URL generated by Rails with the action, "edit."

In addition to using the existing routes that exist within Rails, you can also make custom routes for Rails to allow users to interact with the data that is specialized to your application.

Using Rails as a background for your web application's user interface allows for cleaner and more easily updatable code, that can be built upon quickly for for a more responsive and dynamic user experience. Because it's open source, you can draw from other programmers who have refined or developed additional code for Rails.
